Данный способ должен подходить для любой Unix системы: Linux, FreeBSD, macOS
Данное руководство писалось на Linux Mint 17.1 ( http://linuxmint.com/ ) и проверялось на Ubuntu 16.04 (https://www.ubuntu.com/)

1. Подготовка системы для кросскомпиляции.

sudo apt-get install git bison cmake flex g++ gperf ruby scons libghc-zlib-dev libghc-zlib-bindings-dev autoconf automake autopoint libtool intltool libtool-bin lzip p7zip-full libgtk2.0-dev


2. Установка MXE и зависимостей

cd /home/<ваше имя>/
git clone https://github.com/mxe/mxe.git


2.1 gcc

cd /home/<ваше имя>/mxe
git checkout add612f408ac24c5f9ae7f525b5c1a3439151023
make gcc zlib libpng

Проверка того, что установка gcc прошла успешно:
В папке /home/<ваше имя>/mxe/usr/bin должен появиться файл i686-w64-mingw32.static-gcc и i686-w64-mingw32.static-g++
И при запуске /home/<ваше имя>/mxe/usr/bin/i686-w64-mingw32.static-gcc -v должно выдаваться
......
Thread model: win32
gcc version 5.4.0 (GCC)

В папке /home/<ваше имя>/mxe/usr/i686-w64-mingw32.static/lib должны быть файлы:
libz.a
libpng.a


2.2 Boost

cd /home/<ваше имя>/mxe
make boost

Проверка что установка Boost прошла успешно:
В /home/<ваше имя>/mxe/usr/i686-w64-mingw32.static/lib папке должны появиться файлы:
-libboost_имябиблиотеки_mt.a (libboost_atomic-mt.a и другие подобные файлы)

В папке /home/<ваше имя>/mxe/usr/i686-w64-mingw32.static/include должна появиться папка boost


2.3 OpenSSL

Чтобы сборка проходила с последней поддерживаемой версией (1.0.2u):
-Откройте файл /home/<ваше имя>/mxe/src/openssl.mk
-Измените 6 и 7 строку на
$(PKG)_VERSION  := 1.0.2u
$(PKG)_CHECKSUM := ecd0c6ffb493dd06707d38b14bb4d8c2288bb7033735606569d8f90f89669d16
-Сохраните изменения


2.4 Qt4 и Qt5

Qt4
-Откройте терминал:

cd /home/<ваше имя>/mxe
make qt

Проверка что Qt4 собрался правильно:
-Откройте терминал:

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
i686-w64-mingw32.static-qmake-qt4 -v

-Должно появиться в ответ
QMake version 2.01a
Using Qt version 4.8.7 in /home/<ваше имя>/mxe/usr/i686-w64-mingw32.static/qt/lib


Qt5
-Откройте терминал:

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/mxe
make qtbase qttools qttranslations

Проверка что Qt5 собрался правильно:
-Откройте терминал:

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
i686-w64-mingw32.static-qmake-qt5 -v

-Должно появиться в ответ
QMake version 3.1
Using Qt version 5.9.3 in /home/<ваше имя>/mxe/usr/i686-w64-mingw32.static/qt5/lib


2.5 Berkeley DB
-Скачайте http://download.oracle.com/berkeley-db/db-6.0.20.tar.gz
-Распакуйте в домашнюю папку
-Откройте файл /home/<ваше имя>/db-6.0.20/src/dbinc/win_db.h
-Измените 
#include <WinIoCtl.h>
на
#include <winioctl.h>
-Сохраните файл
-Откройте терминал:

cd /home/<ваше имя>/db-6.0.20/dist
chmod +x configure
cd
cd /home/<ваше имя>/db-6.0.20/build_unix
export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
../dist/configure --host=i686-w64-mingw32.static --enable-mingw --enable-cxx --disable-shared --disable-replication
make

Проверка, что установка Berkeley DB прошла успешно:
В папке /home/<ваше имя>/db-6.0.20/build_unix должны появиться файлы:
libdb.a
libdb_cxx.a


2.6 qrencode
-Скачайте http://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz
-Распакуйте в домашнюю папку
-Откройте терминал:

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/qrencode-3.4.4
chmod +x configure
./configure --host=i686-w64-mingw32.static --enable-static --disable-shared --without-tools
make

Проверка что qrencode успешно собралась:
в папке /home/<ваше имя>/qrencode-3.4.4/.libs должен быть файл:
libqrencode.a


3. Компиляция

3.1 Скачиваем исходники
-Перейдите в домашнюю папку
-Откройте терминал:

git clone https://github.com/42-coin/42.git

3.2 Собираем 42d 
-Откройте файл makefile.mingw в текстовом редакторе (например, Pluma, gedit)
-Замените CC=gcc на 
CC=$(CROSS)gcc
CXX=$(CROSS)g++

-Добавьте  строчку USE_ASM:=1
-Поменяйте текущие INCLUDEPATHS, LIBPATHS, LIBS на:

BOOST_SUFFIX?=-mt
BOOST_THREAD_LIB_SUFFIX?=_win32-mt

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"/home/<ваше имя>/db-6.0.20/build_unix" \
 
LIBPATHS= \
 -L"$(CURDIR)/leveldb" \
 -L"/home/<ваше имя>/db-6.0.20/build_unix" \

LIBS= \
  -l leveldb \
  -l memenv \
  -l boost_system$(BOOST_SUFFIX) \
  -l boost_filesystem$(BOOST_SUFFIX) \
  -l boost_program_options$(BOOST_SUFFIX) \
  -l boost_thread$(BOOST_THREAD_LIB_SUFFIX) \
  -l boost_chrono$(BOOST_SUFFIX) \
  -l db_cxx \
  -l ssl \
  -l crypto \
  -l z \
  -l pthread

-Поменяйте в последних строчках makefile.mingw
g++ -c $(CFLAGS) -o $@ $<
на
$(CXX) -c $(CFLAGS) -o $@ $<

g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)
на
$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

-Если вы хотите использовать LevelDB как базу блоков то измените:
USE_LEVELDB:=0 
на
USE_LEVELDB:=1

Откройте файл /home/<ваше имя>/42/src/leveldb/Makefile
Вставьте ниже строчки CXXFLAGS += -I. -I./include $(PLATFORM_CXXFLAGS) $(OPT) следующие строки:

CC=$(CROSS)gcc
CXX=$(CROSS)g++
Сохраните файл

Снова возвращаемся в файл makefile.mingw, измените 
cd leveldb;TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a; cd ..
на 
cd leveldb; TARGET_OS=NATIVE_WINDOWS make CROSS=i686-w64-mingw32.static- libleveldb.a libmemenv.a; cd ..

Если вы хотите использовать BerkeleyDB как базу блоков, то просто удалите строчку USE_LEVELDB:=1

Измените
clean:
	-del /Q 42d.exe
	-del /Q obj\*
	-del /Q crypto\scrypt\asm\obj\*

на

clean:
	-rm 42d.exe
	-rm obj/*
	-rm crypto/scrypt/asm/obj/*

-Сохраните измененный файл makefile.mingw

-Откройте терминал:

cd /home/<ваше имя>/42/src
export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
make -j n CROSS=i686-w64-mingw32.static- -f makefile.mingw (вместо n количество ядер вашего процессора, которые вы хотите выделить под сборку)
strip 42d.exe

Если всё сделано правильно, то файл 42d.exe будет находится в папке /home/<ваше имя>/42/src.

3.3 Собираем 42-qt

Внимание: Если вы хотите собирать 42 Qt с LevelDB, но пропустили шаг со сборкой 42d.exe, то 
-Измените Makefile в папке leveldb также как в пункте 3.2
-Откройте терминал:

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/42/src/leveldb
TARGET_OS=NATIVE_WINDOWS make CROSS=i686-w64-mingw32.static- libleveldb.a libmemenv.a

-Откройте файл /home/<ваше имя>/42/42-qt.pro в текстовом редакторе (например, Pluma, gedit)
-Ниже 
# Dependency library locations can be customized with:
#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,
#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively
замените прописанные пути к зависимостям на

BOOST_LIB_SUFFIX=-mt
BOOST_THREAD_LIB_SUFFIX=_win32-mt
BDB_INCLUDE_PATH=/home/<ваше имя>/db-6.0.20/build_unix
BDB_LIB_PATH=/home/<ваше имя>/db-6.0.20/build_unix
QRENCODE_INCLUDE_PATH=/home/<ваше имя>/qrencode-3.4.4
QRENCODE_LIB_PATH=/home/<ваше имя>/qrencode-3.4.4/.libs

Так же измените(если ещё не изменено) 
LIBS += -lshlwapi
genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a

на
 
LIBS += -lshlwapi
#genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a

Если в файле нет такой строчки CONFIG += static , то добавьте её.

Измените 
win32:QMAKE_LFLAGS *= -Wl,--dynamicbase -Wl,--nxcompat
на 
win32:QMAKE_LFLAGS *= -Wl,--large-address-aware -static 

Измените 
win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]\\lrelease.exe
на
win32:QMAKE_LRELEASE = $$[QT_INSTALL_BINS]/lrelease

-Сохраните измененный файл 42-qt.pro
-Откройте терминал и выполните следующие команды:

Qt4 + транзакционный индекс BDB

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/42
i686-w64-mingw32.static-qmake-qt4 "USE_ASM=1" 42-qt.pro
make -j n -f Makefile.Release  (вместо n количество ядер вашего процессора, которые вы хотите выделить под сборку)

Qt4 + транзакционный индекс LevelDB

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/42
i686-w64-mingw32.static-qmake-qt4 "USE_LEVELDB=1" "USE_ASM=1" 42-qt.pro
make -j n -f Makefile.Release  (вместо n количество ядер вашего процессора, которые вы хотите выделить под сборку)

Qt5 + транзакционный индекс BDB

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/42
i686-w64-mingw32.static-qmake-qt5 "USE_ASM=1" 42-qt.pro
make -j n -f Makefile.Release  (вместо n количество ядер вашего процессора, которые вы хотите выделить под сборку)

Qt5 + транзакционный индекс LevelDB

export PATH=/home/<ваше имя>/mxe/usr/bin:$PATH
cd /home/<ваше имя>/42
i686-w64-mingw32.static-qmake-qt5 "USE_LEVELDB=1" "USE_ASM=1" 42-qt.pro
make -j n -f Makefile.Release  (вместо n количество ядер вашего процессора, которые вы хотите выделить под сборку)

Если всё сделано правильно, то файл 42-qt.exe будет находится в папке /home/<ваше имя>/42/release.

Если вы хотите уменьшить размер бинарных файлов, то
1) Перейдите на сайт http://upx.sourceforge.net/#downloadupx
2) Скачайте программу в соответсвии с вашей системой
3) Распакуйте программу в папку с бинарными 42 файлами.
4) Введите в терминале
./upx -9 42d.exe
затем
./upx -9 42-qt.exe

И ваши 42d и 42-qt станут меньше ~ в 3 раза.